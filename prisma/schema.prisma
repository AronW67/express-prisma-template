// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_HOST")
}

model User {
  id String @id @default(uuid())
  name String 
  age Int
  email String @unique
  isAdmin Boolean
  writtenPosts Post[] @relation("WrittenPosts")
  favouritedPosts Post[] @relation("FavouritePosts")
  userPreference UserPreference?

  @@unique([age, name]) // Can make composite unique requirements for the object - Users cannot have the same age and name
  @@index([email]) // Apply index to column for query performance
}

model UserPreference {
  id String @id @default(uuid())
  emailUpdates Boolean
  user User @relation(fields: [userId], references: [id])
  userId String @unique
}

model Post {
  Id String @id @default(uuid())
  title String
  rating Float
  createdAt DateTime
  updatedAt DateTime @updatedAt
  author User @relation("WrittenPosts", fields: [authorId], references: [id]) // One to many relationship example
  authorId String
  favourited User? @relation("FavouritePosts", fields: [favouritedId], references: [id]) // Optional one to many relationship example
  favouritedId String?
  categories Category[] // Many to many relationship example
  role Role @default(BASIC) // Assign enum value to column

  //@@id([title, authorId]) Instead of defining one unique column for an id we can define composite ids
}

model Category {
  id String @id @default(uuid())
  name String @unique
  posts Post[]
}

// Can define enums
enum Role {
  BASIC
  ADMIN
}